generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TEACHER
  STUDENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  voicePreference String @default("bella")

  uploadedBooks Book[] @relation("BookUploader")

  @@map("users")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  fileUri     String
  chaptersInfo Chapter[]
  
  uploaderId  String
  uploader    User     @relation("BookUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("books")
}


model Chapter {
  id String @id @default(cuid())
  title String
  startPage Int
  endPage Int

  bookId String
  book Book @relation(fields: [bookId], references: [id])

  fileUri String?

  summary String?
  podcastUrl String?
  test Test?

  @@map("chapters")
}

model Test {
  id String @id @default(cuid())
  title String
  description String?
  
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  questions Question[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tests")
}

model Question {
  id String @id @default(cuid())
  questionText String
  
  testId String
  test Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  
  options Option[]
  
  createdAt DateTime @default(now())

  @@map("questions")
}

model Option {
  id String @id @default(cuid())
  optionText String
  isCorrect Boolean @default(false)
  
  questionId String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("options")
}